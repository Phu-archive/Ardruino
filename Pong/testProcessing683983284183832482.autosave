class Object {
  float x;
  float y;

  float speed_x;
  float speed_y;

  Object(float start_x, float start_y, float start_speed_x, float start_speed_y){
    x = start_x;
    y = start_y;
    speed_x = start_speed_x;
    speed_y = start_speed_y;
  }
}

class Ball extends Object{

  Ball(float start_x, float start_y, float start_speed_x, float start_speed_y){
    super(start_x, start_y, start_speed_x, start_speed_y);
  }

  void move(){
    x = x + speed_x;
    y = y + speed_y;
  }

  void bounce(){
    speed_x = speed_x * -1;
    speed_y = speed_y * -1;
  }
}

class Pad extends Object{
  float pad_width;
  float pad_height;

  Pad(float start_x, float start_y, float start_speed, float start_pad_width, float start_pad_height){
    super(start_x, start_y, 0, start_speed);
    pad_width = start_pad_width;
    pad_height = start_pad_height;
  }

}


class PlayerPad extends Pad{

  PlayerPad(float start_x, float start_y, float start_speed, float start_pad_width, float start_pad_height){
    super(start_x, start_y, start_speed, start_pad_width, start_pad_height);
  }

  void moveUp(){
    y = y + speed_y;
  }

  void moveDown(){
    y = y - speed_y;
  }

}

class AIPad extends Pad{

  AIPad(float start_x, float start_y, float start_speed, float start_pad_width, float start_pad_height){
    super(start_x, start_y, start_speed, start_pad_width, start_pad_height);
  }

  void move(Ball b){
      y = y + (b.y - y) * speed_y;
  }

}


// Screen size
int screen_width = 700;
int screen_height = 700;

//Start Location
float x = 100;
float y = 100;

// Speed
float xspeed = 5;
float yspeed = 5;

// Size of pad
float pad_width = 10;
float pad_height = 100;

// Size of ball
float ball_size = 16;

float pad_speed = 0.8;

// Location of the first pad (Player) at start
float player1_x = 30;
float player1_y = 30;

// Locatopn of the second pad (AI) at start
float player2_x = screen_width - player1_x * 2;
float player2_y = 30;

Ball ball;
AIPad player2;


void setup() {
  ball = new Ball(x, y, xspeed, yspeed);
  player2 = new AIPad(player2_x, player2_y, pad_speed, pad_width, pad_height);
  size(700, 700);
  background(255);
}

// boolean isHit(float pad_x, float pad_y, float pad_width, float pad_height, float ball_x, float ball_y, float ball_size){
//   // https://stackoverflow.com/questions/21089959/detecting-collision-of-rectangle-with-circle
//   // Start by finding the middle point of rectangle
//   float middle_x = pad_x + pad_width/2;
//   float middle_y = pad_y + pad_height/2;
//
//   // Find the distance between circle and rectangle
//   float dis_x = abs(middle_x - ball_x);
//   float dis_y = abs(middle_y - ball_y);
//
//   // if the distance is more than half-circle + half-rect then return False
//   if (dis_x > (pad_width/2 + ball_size)){
//     return false;
//   }
//
//   if (dis_y > (pad_height/2 + ball_size)){
//     return false;
//   }
//
//   // Test for the corner.
//   float diff_x = dis_x - pad_width/2;
//   float diff_y = dis_y - pad_height/2;
//   return (diff_x*diff_x + diff_y*diff_y) <= (ball_size * ball_size);
//
// }

void one_step(int action){

  if(action == 1){
    // Player choose to go up
   }else if (action == 2){
    // Player choose to go down
   }
}

void draw() {
  background(255);

  // if(isHit(player2_x, player2_y, pad_width, pad_height, x, y, ball_size)){
  //   // Hit !!!
  //   xspeed = xspeed * -1;
  //   yspeed = yspeed * -1;
  // }

  ball.move();
  player2.move(ball);

  stroke(0);
  fill(175);
  // Draw a ball
  ellipse(ball.x,ball.y,ball_size,ball_size);

  // Draw a player_1
  rect(player1_x, player1_y, pad_width, pad_height);

  // Draw a player_2
  rect(player2.x, player2.y, pad_width, pad_height);
}